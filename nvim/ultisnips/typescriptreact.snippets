global !p
import os
import string
import re
def component():
	result = snip.basename
	isIndex = result == 'index'
	segments = path.split('/')

	if isIndex:
		parent = segments[-2]
		
		if parent == 'pages':
			result = 'HomePage'
		elif parent == 'src':
			result = 'App'
		else:
			result = parent

	if 'pages' in segments:
		result += 'Page'
	
	allowedChars = '([^[A-Z\-_\.]])|(?<=[_\.\-])([_\.\-])*|(^[_\.\-])'
	filteredString = re.sub(allowedChars, '', result)

	separator = '\-|_\.|(?=[A-Z])'
	result = ''.join(map(lambda word: string.capwords(word), re.split(separator, filteredString)))

	return result
def props():
	return component() + 'Props'
endglobal

snippet fc "Function Component" b
import { FC } from 'react';

export const `!p snip.rv = component()`: FC = () => {
	return (
		$1
	);
};

endsnippet

snippet fcpl "Plain Function Component" b
import { FC } from 'react';

export const `!p snip.rv = component()`: FC = () => (
	$1
);

endsnippet

snippet fcp "Function Component With Props" b
import { FC } from 'react';

export interface `!p snip.rv = props()` {
	$1
}

export const `!p snip.rv = component()`: FC<`!p snip.rv = props()`> = ({ $2 }) => {
	return (
		$3
	);
};

endsnippet

snippet fcpp "Plain Function Component With Props" b
import { FC } from 'react';

export interface `!p snip.rv = props()` {
	$1
}

export const `!p snip.rv = component()`: FC<`!p snip.rv = props()`> = ({ $2 }) => (
	$3
);

endsnippet

snippet np "Next Page" b
import { NextPage } from 'next';

const `!p snip.rv = component()`Page: NextPage = () => {
	return (
		$1
	);
};

export default `!p snip.rv = component()`Page;

endsnippet
